#!/usr/bin/env python
# -*- coding: utf-8 -*-

# "THE WISKEY-WARE LICENSE":
# <utn_kdd@googlegroups.com> wrote this file. As long as you retain this notice
# you can do whatever you want with this stuff. If we meet some day, and you
# think this stuff is worth it, you can buy us a WISKEY us return.


#===============================================================================
# DOCS
#===============================================================================

"""Launcher of yatel gui client

"""

#===============================================================================
# IMPORTS
#===============================================================================

import sys
import urlparse
import argparse

import yatel
from yatel import db
from yatel import remote
from yatel.libs import caipyrinha


#===============================================================================
# CLI parser
#===============================================================================

parser = caipyrinha.Caipyrinha(prog=yatel.PRJ,
                               description=yatel.SHORT_DESCRIPTION,
                               formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("--version", action='version',
                    version="%(prog)s {}".format(yatel.STR_VERSION))
parser.add_argument("--no-gui", action="store_true")


@parser.callback(metavar="CONNECTION")
def database(flags, returns):
        """database to be open with yatel

            SQLite -> sqlite://[DATABASE]
            MySql -> mysql://USER:PASSWORD@HOST:PORT/DATABASE
            PostgreSQL -> postgres://USER:PASSWORD@HOST:PORT/DATABASE.
            Remote Yatel -> yatel://HOST@PORT

        """
        parsed = urlparse.urlparse(flags.database)
        engine = parsed.scheme
        conf = {}
        if engine == "yatel":
            fullpath = parsed.netloc + parsed.path
            host, port = [p for p in fullpath.split(":", 1)]
            conf = {"engine": engine, "host": host, "port": int(port)}
        elif engine not in db.ENGINES:
            raise ValueError(db.ENGINES)
        elif engine in db.FILE_ENGINES:
            dbname = parsed.netloc + parsed.path
            conf = {"engine": engine, "dbname": dbname}
        else:
            dbname = parsed.path[1:]
            auth, loc = parsed.netloc.split("@", 1)
            user, password = [p for p in auth.split(":")]
            host, port = [p for p in loc.split(":")]
            conf = {"engine": engine, "dbname": dbname, "user": user,
                     "host": host, "port": int(port), "password": password}
        engine = conf.pop("engine")
        if engine != "yatel":
            name = conf.pop("dbname")
            conn = db.YatelConnection(engine, name, **conf)
            conn.init_yatel_database()
            return conn
        else:
            return remote.YatelRemoteClient(host=conf["host"],
                                             port=conf["port"])


@parser.callback(group="serve", metavar="HOST:PORT", exit=0)
def serve(flags, returns):
    """serve the given yatel connection via web server via JSON-RPC

    """
    def serve_parser(p):
        host, port = p.split(":")
        port = int(port)
        if not 0 <= port <= 65535:
            raise ValueError("port must be 0-65535")
        return {"host": host, "port": int(port)}


    serve_args = serve_parser(flags.serve)
    conn = returns.database
    if isinstance(conn, remote.YatelRemoteClient):
        parser.error("you can't serve a yatel remote instance")
    server = remote.YatelServer(conn)
    server.run(**serve_args)


#===============================================================================
# FUNCTION
#===============================================================================

def main():
    """Run a yatel qt app client

    """
    if "--no-gui" in sys.argv or "--help" in sys.argv:
        parser(sys.argv[1:])
    else:
        from yatel import gui
        gui.run_gui(parser)


#===============================================================================
# MAIN
#===============================================================================

if __name__ == "__main__":
    main()
