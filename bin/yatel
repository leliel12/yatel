#!/usr/bin/env python
# -*- coding: utf-8 -*-

# "THE WISKEY-WARE LICENSE":
# <utn_kdd@googlegroups.com> wrote this file. As long as you retain this notice
# you can do whatever you want with this stuff. If we meet some day, and you
# think this stuff is worth it, you can buy us a WISKEY us return.


#===============================================================================
# DOCS
#===============================================================================

"""Launcher of yatel gui client

"""

#===============================================================================
# IMPORTS
#===============================================================================

import sys
import urlparse
import argparse

import yatel
from yatel import db
from yatel import remote


#===============================================================================
# CLI PARSER
#===============================================================================

def cli_parser(args):
    """This function parses and executes the coman line arguments

    """

    psr = argparse.ArgumentParser(prog=yatel.PRJ,
                                  formatter_class=argparse.RawTextHelpFormatter)

    def connection_parser(cs):
        parsed = urlparse.urlparse(cs)
        engine = parsed.scheme
        if engine not in db.ENGINES:
            raise ValueError(db.ENGINES)
        if engine in db.FILE_ENGINES:
            dbname = parsed.netloc + parsed.path
            return {"engine": engine,
                     "dbname": dbname}
        else:
            dbname = parsed.path[1:]
            auth, loc = parsed.netloc.split("@", 1)
            user, password = [p for p in auth.split(":")]
            host, port = [p for p in loc.split(":")]
            return {"engine": engine,
                     "dbname": dbname,
                     "user": user,
                     "host": host,
                     "port": int(port) if port else None,
                     "password": password}

    def serve_parser(p):
        host, port = p.split(":")
        return {"host": host, "port": port}

    # General options
    psr.add_argument("--no-gui", action="store_true",
                     help="prevents to use the Qt interface")
    psr.add_argument('--version', action='version',
                     version="%(prog)s {}".format(yatel.STR_VERSION))

    # Wich database will be open with yatel
    psr.add_argument("--database", action="store", type=connection_parser,
                     help=("database to open with yatel.\n"
                            "   SQLite -> sqlite://[DATABASE]\n"
                            "   MySql -> mysql://USER:PASSWORD@HOST:PORT/DATABASE\n"
                            "   PostgreSQL -> postgres://USER:PASSWORD@HOST:PORT/DATABASE"))

    # Utilities
    group = psr.add_mutually_exclusive_group()
    group.add_argument("--serve", action="store", type=serve_parser,
                       help=("serve the given yatel connection via web server "
                              "JSON-RPC like protocol"))

    flags = psr.parse_args(args[1:])

    conn = None
    if flags.database:
        engine = flags.database.pop("engine")
        name = flags.database.pop("dbname")
        conn = db.YatelConnection(engine, name, **flags.database)

    if flags.serve:
        conn.init_yatel_database()
        server = remote.YatelServer(conn)
        server.run(**flags.serve)
        sys.exit(0)
    elif conn:
        conn.init_yatel_database()
    return conn


#===============================================================================
# FUNCTION
#===============================================================================

def main():
    """Run a yatel qt app client

    """
    if "--no-gui" in sys.argv or "--help" in sys.argv:
        cli_parser(sys.argv)
    else:
        from yatel import gui
        gui.run_gui(cli_parser)


#===============================================================================
# MAIN
#===============================================================================

if __name__ == "__main__":
    main()
